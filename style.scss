//// Functions - If Else statements

$size: 18px;

.switch {
  font-size: $size;
  @if $size <= 16px {
    font-family: Arial, sans-serif;
  } @else {
    font-family: Helvetica, sans-serif;
  }
}

//// Functions - Else if statements

$size: 18px;

.switch {
  font-size: $size;
  @if $size <= 16px {
    font-family: Arial, sans-serif;
  } @else if $size <= 24px {
  	font-family: Georgia, serif;
  }
		@else {
    font-family: Helvetica, sans-serif;
  }
}

//// @mixin and @include if else statement

@mixin family($size){
  font-size: $size;
  @if $size <= 16px {
    font-family: Arial, sans-serif;
  } @else if $size <= 24px {
    font-family: Georgia, serif;
  } @else {
    font-family: Helvetica, sans-serif;
  }
 }
.switch {
	@include family(18px); // calling the mixin family, passing 18px as the argument.
  }

//// @each

.tool-socket {
  background: url("socket.png") no-repeat; }

.tool-wrench {
  background: url("wrench.png") no-repeat; }

.tool-bolt {
  background: url("bolt.png") no-repeat; }

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

$tools: socket wrench bolt;

@each $tool in $tools {
  .tool-#{$tool} {
    background: url('#{$tool}.png') no-repeat;
    }
  }

// Function, argument, return, formula, set value to function with width 500px

@function aspect($width) {
  @return $width * 9 / 16;
}

.intro {
  background: #000;
  width: 500px;
  height: aspect(500px);
}

// Number stored in $size, @if statement, @else statement
$size: 18px;

.switch {
  font-size: $size;
  @if $size <= 16px {
    font-family: Arial, sans-serif;
  }
	@else {
  	font-family: Helvetica, sans-serif;
  }
}

//@if @else statements with @else if statement between

$size: 18px;

.switch {
  font-size: $size;
  @if $size <= 16px {
    font-family: Arial, sans-serif;
  } @else if $size <= 24px {
  	font-family: Georgia, serif;
  } @else {
    font-family: Helvetica, sans-serif;
  }
}

//@mixin derivitive
@mixin family($size) {
    font-size: $size;
  @if $size <= 16px {
    font-family: Arial, sans-serif;
  } @else if $size <= 24px {
    font-family: Georgia, serif;
  } @else {
    font-family: Helvetica, sans-serif;
  }
}

.switch {
  @include family (18px);
  }

//@each derivitive, list variable
$tools: socket wrench bolt;

@each $tool in $tools {
  .tool-#{$tool} {
    background: url('#{$tool}.png') no-repeat;
    }
  }

// .tool-socket {
//   background: url('socket.png') no-repeat;
// }
// .tool-wrench {
//   background: url('wrench.png') no-repeat;
// }
// .tool-bolt {
//   background: url('bolt.png') no-repeat;
// }

// Converting @if & % operator with @while derivitive
$i: 1; //i variable initialized to 1

@while $i <= 7 { //@while from 1 through 7
  .row-#{$i} {
		background: #ccc;
   	height: $i * 10px;
  }
$i: $i + 2;
}

// @for $i from 1 through 7 {
//   @if $i % 2 != 0 {
//     .row-#{$i} {
//       background: #ccc;
//       height: $i * 10px;
//     }
//   }
// }

//Declaring a variable with a numeral value, then subtracting width of two elements by said variable
$gutter: 20px;

.factory {
  background: #fff;
  margin-right: $gutter;
  width: 600px - $gutter;
}
.highrise {
  background: #797979;
  margin-right: $gutter;
  width: 300px - $gutter;
}
